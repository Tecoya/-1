package exam.thread;

public class NumberThread extends Thread{
	public int first;
	
	public NumberThread(int first,String name) {
		super(name);
		this.first = first;
	}

	public void run()
	{
		System.out.println(this.getName());
		for(int i=first;i<100;i+=2)
		{
			System.out.print(i+" ");
		}
	}
    public static void main(String[] args) {
		NumberThread n1=new NumberThread(1, "奇数线程");
		n1.run();
		(new NumberThread(2, "偶数线程")).run();
		System.out.println();
		System.out.println(Thread.currentThread().getName());
		
	}

}

package exam.runnable;
/**
 * Callable和Runnable有几点不同：
（1）Callable规定的方法是call()，而Runnable规定的方法是run().
（2）Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。
（3）call()方法可抛出异常，而run()方法是不能抛出异常的。
（4）运行Callable任务可拿到一个Future对象，Future表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。
通过Future对象可了解任务执行情况，可取消任务的执行，还可获取任务执行的结果
 * */
public class NumRunnable implements Runnable{

	public int first;
	
	
	public NumRunnable(int first) {
		super();
		this.first = first;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int i=first;i<100;i+=2)
		{
			System.out.print(i+" ");
		}
		
	}
	public static void main(String[] args) {
		NumRunnable runnable = new NumRunnable(1);
        Thread t1 = new Thread(runnable,"奇数线程");
        
        t1.run();
	}

}


package eaxm.datasource;
import java.util.concurrent.*;;
/**
 * (1)创建Callable接口的实现类，并实现call()方法
 * (2)new实例，使用FutureTask包装对象
 * (3)使用FutureTask对象作为Thread的start（类似于runnable接口）
 * (4)使用FutureTask对象的get()方法获得返回值
 * */

/**
 * （1）创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。

（2）创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。

（3）使用FutureTask对象作为Thread对象的target创建并启动新线程。

（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值
 * */
public class CallableThread implements Callable<Integer>{
	public static void main(String[] args) {
		CallableThread ctt = new CallableThread();
		//父类对象引用子类实例
		FutureTask<Integer> ft =new FutureTask<Integer>(ctt);
	/*	for(int i=0;i<100;i++)
		{
			
		}*/
		new Thread(ft,"有返回值得线程").start();
		System.out.println(Thread.currentThread().getName());
		try {
			System.out.println("子线程的返回值："+ft.get());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public Integer call() throws Exception {
		// TODO Auto-generated method stub
		/**
		 * for(int i=0;i<100;i++)为什么用这种方式就错了呢
		 * */
		int i=0;
		for(;i<100;i+=2)
		{
			System.out.println(Thread.currentThread().getName()+i+" ");
		}
		return i;
	}

}
